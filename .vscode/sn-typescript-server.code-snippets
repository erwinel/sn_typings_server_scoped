{
	"SN API Class": {
		"scope": "typescript",
		"prefix": "sn-api",
		"body": [
			"interface I${1:ClassName}Base extends \\$\\$snClass.ICustomClassBase<I$1Base, \"$1\"> {",
			"}",
			"",
			"interface I$1Prototype extends \\$\\$snClass.ICustomClassPrototype0<I$1Base, I$1Prototype, \"$1\">, I$1Base {",
			"}",
			"",
			"declare type $1 = Readonly<I$1Base>;",
			"",
			"interface $1Constructor extends \\$\\$snClass.CustomClassConstructor0<I$1Base, I$1Prototype, $1> {",
			"}",
			"const $1: $1Constructor = (function (): $1Constructor {",
			"    var ${1/\\s*(\\S+)/${1:/downcase}/}Constructor: $1Constructor = Class.create();",
			"",
			"    ${1/\\s*(\\S+)/${1:/downcase}/}Constructor.prototype = {",
			"        // initialize: function(): void { },",
			"",
			"        type: \"$1\"",
			"    };",
			"",
			"    return ${1/\\s*(\\S+)/${1:/downcase}/}Constructor;",
			"})();"
		],
		"description": "Create ServiceNow API class"
	},
	"SN API Class (1 arg)": {
		"scope": "typescript",
		"prefix": "sn-api-1",
		"body": [
			"interface I${1:ClassName}Base extends \\$\\$snClass.ICustomClassBase<I$1Base, \"$1\"> {",
			"}",
			"",
			"interface I$1Prototype extends \\$\\$snClass.ICustomClassPrototype1<I$1Base, I$1Prototype, \"$1\", ${2:any}>, I$1Base {",
			"    _${3:value}?: $2;",
			"}",
			"",
			"declare type $1 = Readonly<I$1Base>;",
			"",
			"interface $1Constructor extends \\$\\$snClass.CustomClassConstructor1<I$1Base, I$1Prototype, $1, $2> {",
			"    new($3: $2): $1;",
			"    ($3: $2): $1;",
			"}",
			"",
			"const $1: $1Constructor = (function (): $1Constructor {",
			"    var ${1/\\s*(\\S+)/${1:/downcase}/}Constructor: $1Constructor = Class.create();",
			"",
			"    ${1/\\s*(\\S+)/${1:/downcase}/}Constructor.prototype = {",
			"        initialize: function($3?: $2): void {",
			"            this._$3 = $3",
			"        },",
			"",
			"        type: \"$1\"",
			"    };",
			"",
			"    return ${1/\\s*(\\S+)/${1:/downcase}/}Constructor;",
			"})();"
		],
		"description": "Create ServiceNow API class with 1 constructor parameter"
	},
	"SN API Class (2 args)": {
		"scope": "typescript",
		"prefix": "sn-api-2",
		"body": [
			"interface I${1:ClassName}Base extends \\$\\$snClass.ICustomClassBase<I$1Base, \"$1\"> {",
			"}",
			"",
			"interface I$1Prototype extends \\$\\$snClass.ICustomClassPrototype2<I$1Base, I$1Prototype, \"$1\", ${2:any}, ${3:any}>, I$1Base {",
			"    _${4:value1}?: $2;",
			"    _${5:value2}?: $3;",
			"}",
			"",
			"declare type $1 = Readonly<I$1Base>;",
			"",
			"interface $1Constructor extends \\$\\$snClass.CustomClassConstructor2<I$1Base, I$1Prototype, $1, $2, $3> {",
			"    new($4: $2, $5: $3): $1;",
			"    ($4: $2, $5: $3): $1;",
			"}",
			"",
			"const $1: $1Constructor = (function (): $1Constructor {",
			"    var ${1/\\s*(\\S+)/${1:/downcase}/}Constructor: $1Constructor = Class.create();",
			"",
			"    ${1/\\s*(\\S+)/${1:/downcase}/}Constructor.prototype = {",
			"        initialize: function($4: $2, $5: $3): void {",
			"            this._$4 = $4",
			"            this._$5 = $5",
			"        },",
			"",
			"        type: \"$1\"",
			"    };",
			"",
			"    return ${1/\\s*(\\S+)/${1:/downcase}/}Constructor;",
			"})();"
		],
		"description": "Create ServiceNow API class with 2 constructor parameters"
	},
	"SN Ajax API Class": {
		"scope": "typescript",
		"prefix": "sn-ajax-api",
		"body": [
			"interface I${1:ClassName}Base extends \\$\\$snClass.ICustomClassBase<I$1Base, \"$1\"> {",
			"    ${2:methodName}(): ${3:void};",
			"}",
			"",
			"interface I$1Prototype extends \\$\\$snClass.ICustomAjaxClassPrototype<I$1Base, I$1Prototype, \"$1\">, I$1Base {",
			"}",
			"",
			"declare type $1 = Readonly<I$1Base>;",
			"",
			"interface $1Constructor extends \\$\\$snClass.CustomAjaxClassConstructor<I$1Base, I$1Prototype, $1> {",
			"    new(request?: GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController): $1;",
			"    (request?: GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController): $1;",
			"    $2(): ${4:void};",
			"}",
			"",
			"const $1: $1Constructor = (function (): $1Constructor {",
			"    var ${1/\\s*(\\S+)/${1:/downcase}/}Constructor: $1Constructor = Class.create();",
			"",
			"    ${1/\\s*(\\S+)/${1:/downcase}/}Constructor.$2 = function(): $4 {",
			"        throw new Error(\"Method not implemented\");",
			"    };",
			"",
			"    ${1/\\s*(\\S+)/${1:/downcase}/}Constructor.prototype = Object.extendsObject<IAbstractAjaxProcessor, I$1Prototype>(global.AbstractAjaxProcessor, {",
			"        // initialize: function(this: I$1Prototype & IAbstractAjaxProcessor, request?: GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController) {",
			"        //     global.AbstractAjaxProcessor.prototype.initialize.call(this, request, responseXML, gc);",
			"        // },",
			"",
			"        $2: function(this: IAbstractAjaxProcessor & I$1Prototype): $3 {",
			"            var result: $4 = ${1/\\s*(\\S+)/${1:/downcase}/}Constructor.$2();",
			"            throw new Error(\"Method not implemented\");",
			"        },",
			"",
			"        type: \"$1\"",
			"    });",
			"",
			"    return ${1/\\s*(\\S+)/${1:/downcase}/}Constructor;",
			"})();"
		],
		"description": "Create client-callable ServiceNow API class"
	},
	"SN Ajax API Class (1 arg)": {
		"scope": "typescript",
		"prefix": "sn-ajax-api-1",
		"body": [
			"interface I${1:ClassName}Base extends \\$\\$snClass.ICustomClassBase<I$1Base, \"$1\"> {",
			"    ${2:methodName}(): ${3:void};",
			"}",
			"",
			"interface I$1Prototype extends \\$\\$snClass.ICustomAjaxClassPrototype<I$1Base, I$1Prototype, \"$1\">, I$1Base {",
			"    _${4:value}?: ${5:any};",
			"}",
			"",
			"declare type $1 = Readonly<I$1Base>;",
			"",
			"interface $1Constructor extends \\$\\$snClass.CustomAjaxClassConstructor<I$1Base, I$1Prototype, $1> {",
			"    new(request?: GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController): $1;",
			"    new($4: $5): $1;",
			"    (request?: GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController): $1;",
			"    ($4: $5): $1;",
			"",
			"    $2($4: $5): ${6:void};",
			"}",
			"",
			"const $1: $1Constructor = (function (): $1Constructor {",
			"    var ${1/\\s*(\\S+)/${1:/downcase}/}Constructor: $1Constructor = Class.create();",
			"",
			"    ${1/\\s*(\\S+)/${1:/downcase}/}Constructor.$2 = function(): $6 {",
			"        throw new Error(\"Method not implemented\");",
			"    };",
			"",
			"    ${1/\\s*(\\S+)/${1:/downcase}/}Constructor.prototype = Object.extendsObject<IAbstractAjaxProcessor, I$1Prototype>(global.AbstractAjaxProcessor, {",
			"        initialize: function(this: IAbstractAjaxProcessor & IReservationSchedulerAjaxPrototype, arg0?: $5 | GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController) {",
			"            if (typeof arg0 === '$5') {",
			"                global.AbstractAjaxProcessor.prototype.initialize.call(this, undefined, responseXML, gc);",
			"                this._$4 = arg0;",
			"            } else {",
			"                global.AbstractAjaxProcessor.prototype.initialize.call(this, arg0, responseXML, gc);",
			"                var value: $$rhino.String = this.getParameter('sys_parm_$4');",
			"                //if (!gs.nil(value))",
			"                //    this._$4 = parseInt('' + value);",
			"            }",
			"        },",
			"",
			"        $2: function(this: IAbstractAjaxProcessor & I$1Prototype): $3 {",
			"            var result: $6 = ${1/\\s*(\\S+)/${1:/downcase}/}Constructor.$2(this._$4);",
			"            throw new Error(\"Method not implemented\");",
			"        },",
			"",
			"        type: \"$1\"",
			"    });",
			"",
			"    return ${1/\\s*(\\S+)/${1:/downcase}/}Constructor;",
			"})();"
		],
		"description": "Create client-callable ServiceNow API class with 1 common parameter"
	},
	"SN Ajax API Class (2 args)": {
		"scope": "typescript",
		"prefix": "sn-ajax-api-2",
		"body": [
			"interface I${1:ClassName}Base extends \\$\\$snClass.ICustomClassBase<I$1Base, \"$1\"> {",
			"    ${2:methodName}(): ${3:void};",
			"}",
			"",
			"interface I$1Prototype extends \\$\\$snClass.ICustomAjaxClassPrototype<I$1Base, I$1Prototype, \"$1\">, I$1Base {",
			"    _${6:value1}?: ${4:any};",
			"    _${7:value2}?: ${5:any};",
			"}",
			"",
			"declare type $1 = Readonly<I$1Base>;",
			"",
			"interface $1Constructor extends \\$\\$snClass.CustomAjaxClassConstructor<I$1Base, I$1Prototype, $1> {",
			"    new(request?: GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController): $1;",
			"    new($6: $4, $7: $5): $1;",
			"    (request?: GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController): $1;",
			"    ($6: $4, $7: $5): $1;",
			"",
			"    $2($6: $4, $7: $5): ${8:void};",
			"}",
			"",
			"const $1: $1Constructor = (function (): $1Constructor {",
			"    var ${1/\\s*(\\S+)/${1:/downcase}/}Constructor: $1Constructor = Class.create();",
			"",
			"    ${1/\\s*(\\S+)/${1:/downcase}/}Constructor.$2 = function(): $8 {",
			"        throw new Error(\"Method not implemented\");",
			"    };",
			"",
			"    ${1/\\s*(\\S+)/${1:/downcase}/}Constructor.prototype = Object.extendsObject<IAbstractAjaxProcessor, I$1Prototype>(global.AbstractAjaxProcessor, {",
			"        initialize: function(arg0?: $4 | GlideServletRequest, arg1? | XMLDocument2: $5, gc?: GlideController): void {",
			"            if (typeof arg0 === '$4') {",
			"                this._$6 = arg0;",
			"                if (typeof arg1 === '$5') {",
			"                    this._$7 = arg1;",
			"                    global.AbstractAjaxProcessor.prototype.initialize.call(this, undefined, undefined, gc);",
			"                } else {",
			"                    global.AbstractAjaxProcessor.prototype.initialize.call(this, undefined, responseXML, gc);",
			"                }",
			"            } else if (typeof arg1 === '$5') {",
			"                this._$7 = arg1;",
			"                global.AbstractAjaxProcessor.prototype.initialize.call(this, arg0, undefined, gc);",
			"            } else {",
			"                global.AbstractAjaxProcessor.prototype.initialize.call(this, arg0, responseXML, gc);",
			"                var value: $$rhino.String = this.getParameter('sys_parm_$6');",
			"                //if (!gs.nil(value))",
			"                //    this._$6 = parseInt('' + value);",
			"                value = this.getParameter('sys_parm_$7');",
			"                //if (!gs.nil(value))",
			"                //    this._$7 = parseInt('' + value);",
			"            }",
			"        },",
			"",
			"        $2: function(this: IAbstractAjaxProcessor & I$1Prototype): $3 {",
			"            var result: $8 = ${1/\\s*(\\S+)/${1:/downcase}/}Constructor.$2(this._$6, this._$7);",
			"            throw new Error(\"Method not implemented\");",
			"        },",
			"",
			"        type: \"$1\"",
			"    });",
			"",
			"    return ${1/\\s*(\\S+)/${1:/downcase}/}Constructor;",
			"})();"
		],
		"description": "Create client-callable ServiceNow API class with 2 common parameters"
	},
	"SN ATF Server Side Script Test": {
		"scope": "typescript",
		"prefix": "sn-test",
		"body": [
			"namespace ${1:testName} {",
			"    declare var outputs: sn_atf.ITestStepOutputs;",
			"    declare function steps(sys_id: string): sn_atf.ITestStepOutputs;",
			"    declare var stepResult: sn_atf.ITestStepResult;",
			"    (function(outputs: sn_atf.ITestStepOutputs, steps: sn_atf.ITestStepsFunc, stepResult: sn_atf.ITestStepResult, assertEqual: sn_atf.IAssertEqualFunc) {",
			"        function setFailed(stepResult: sn_atf.ITestStepResult, reason: string, e?: any): void {",
			"            if (gs.nil(e))",
			"                stepResult.setOutputMessage(reason);",
			"            else {",
			"                var m = gs.nil(e.message) ? '' : ((typeof e.message === 'string') ? e.message : '' + e.message).trim();",
			"                var name = gs.nil(e.name) ? '' : ((typeof e.name === 'string') ? e.name : '' + e.name).trim();",
			"                var stack = gs.nil(e.stack) ? '' : ((typeof e.stack === 'string') ? e.stack : '' + e.stack).trim();",
			"                if (m.length > 0) {",
			"                    if (name.length > 0) {",
			"                        if (stack.length > 0)",
			"                            stepResult.setOutputMessage(\"Unexpected \" + name + \": \" + reason + \"\\nMessage: \" + m + \"\\nStack trace:\\n\" + stack);",
			"                        else",
			"                            stepResult.setOutputMessage(\"Unexpected \" + name + \": \" + reason + \"\\nMessage: \" + m);",
			"                    }",
			"                    else if (stack.length > 0)",
			"                        stepResult.setOutputMessage(\"Unexpected error: \" + reason + \"\\nMessage: \" + m + \"\\nStack trace:\\n\" + stack);",
			"                    else",
			"                        stepResult.setOutputMessage(\"Unexpected error: \" + reason + \"\\nMessage: \" + m);",
			"                } else if (name.length > 0)",
			"                    stepResult.setOutputMessage(\"Unexpected error: \" + ((stack.length > 0) ? reason + \"\\n\" + stack : reason));",
			"                else if (stack.length > 0)",
			"                    stepResult.setOutputMessage(\"Unexpected error: \" + reason + \"\\n\" + stack);",
			"                else if ((m = ('' + e).trim()).length > 0)",
			"                    stepResult.setOutputMessage(\"Unexpected error: \" + reason + \"\\nMessage: \" + m);",
			"                else",
			"                    stepResult.setOutputMessage(\"Unexpected error: \" + reason);",
			"            }",
			"            stepResult.setFailed();",
			"        }",
			"",
			"        var actual: boolean | undefined",
			"        try {",
			"            // Add test code here",
			"        } catch (e) {",
			"            setFailed('Unexpected exception while getting result', e);",
			"        }",
			"        assertEqual({",
			"            name: 'result is boolean',",
			"            shouldBe: true,",
			"            value: typeof actual",
			"        }",
			"        assertEqual({",
			"            name: 'result is true',",
			"            shouldBe: true,",
			"            value: actual",
			"        }",
			"    }",
			"}"
		],
		"description": "TypeScript boilerplate code for 'Run Server Side Script' test step"
	}
}