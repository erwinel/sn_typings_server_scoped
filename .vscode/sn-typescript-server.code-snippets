{
	"SN API Class": {
		"scope": "typescript",
		"prefix": "sn-api",
		"body": [
			"namespace ${1:${TM_DIRECTORY/^[\\\\\\/]*([^\\\\\\/]+[\\\\\\/]+)*//}} {",
			"    interface I${2:${TM_FILENAME/\\..*$$//}}Base extends \\$\\$snClass.ICustomClassBase<I$2Base, \"$2\"> {",
			"    }",
			"",
			"    interface I$2Prototype extends \\$\\$snClass.ICustomClassPrototype0<I$2Base, I$2Prototype, \"$2\">, I$2Base {",
			"    }",
			"",
			"    declare type $2 = Readonly<I$2Base>;",
			"",
			"    interface $2Constructor extends \\$\\$snClass.CustomClassConstructor0<I$2Base, I$2Prototype, $2> {",
			"    }",
			"    const $2: $2Constructor = (function (): $2Constructor {",
			"        var ${2/\\s*(\\S+)/${2:/downcase}/}Constructor: $2Constructor = Class.create();",
			"",
			"        ${2/\\s*(\\S+)/${2:/downcase}/}Constructor.prototype = {",
			"            // initialize: function(): void { },",
			"",
			"            type: \"$2\"",
			"        };",
			"",
			"        return ${2/\\s*(\\S+)/${2:/downcase}/}Constructor;",
			"    })();",
			"}"
		],
		"description": "Create ServiceNow API class"
	},
	"SN API Class (1 arg)": {
		"scope": "typescript",
		"prefix": "sn-api-1",
		"body": [
			"namespace ${1:${TM_DIRECTORY/^[\\\\\\/]*([^\\\\\\/]+[\\\\\\/]+)*//}} {",
			"    interface I${2:${TM_FILENAME/\\..*$$//}}Base extends \\$\\$snClass.ICustomClassBase<I$2Base, \"$2\"> {",
			"    }",
			"",
			"    interface I$2Prototype extends \\$\\$snClass.ICustomClassPrototype1<I$2Base, I$2Prototype, \"$2\", ${3:any}>, I$2Base {",
			"        _${4:value}?: $3;",
			"    }",
			"",
			"    declare type $2 = Readonly<I$2Base>;",
			"",
			"    interface $2Constructor extends \\$\\$snClass.CustomClassConstructor1<I$2Base, I$2Prototype, $2, $3> {",
			"        new($4: $3): $2;",
			"        ($4: $3): $2;",
			"    }",
			"",
			"    const $2: $2Constructor = (function (): $2Constructor {",
			"        var ${2/\\s*(\\S+)/${2:/downcase}/}Constructor: $2Constructor = Class.create();",
			"",
			"        ${2/\\s*(\\S+)/${2:/downcase}/}Constructor.prototype = {",
			"            initialize: function($4?: $3): void {",
			"                this._$4 = $4",
			"            },",
			"",
			"            type: \"$2\"",
			"        };",
			"",
			"        return ${2/\\s*(\\S+)/${2:/downcase}/}Constructor;",
			"    })();",
			"}"
		],
		"description": "Create ServiceNow API class with 1 constructor parameter"
	},
	"SN API Class (2 args)": {
		"scope": "typescript",
		"prefix": "sn-api-2",
		"body": [
			"namespace ${1:${TM_DIRECTORY/^[\\\\\\/]*([^\\\\\\/]+[\\\\\\/]+)*//}} {",
			"    interface I${2:${TM_FILENAME/\\..*$$//}}Base extends \\$\\$snClass.ICustomClassBase<I$2Base, \"$2\"> {",
			"    }",
			"",
			"    interface I$2Prototype extends \\$\\$snClass.ICustomClassPrototype2<I$2Base, I$2Prototype, \"$2\", ${3:any}, ${4:any}>, I$2Base {",
			"        _${5:value1}?: $3;",
			"        _${6:value2}?: $4;",
			"    }",
			"",
			"    declare type $2 = Readonly<I$2Base>;",
			"",
			"    interface $2Constructor extends \\$\\$snClass.CustomClassConstructor2<I$2Base, I$2Prototype, $2, $3, $4> {",
			"        new($5: $3, $6: $4): $2;",
			"        ($5: $3, $6: $4): $2;",
			"    }",
			"",
			"    const $2: $2Constructor = (function (): $2Constructor {",
			"        var ${2/\\s*(\\S+)/${2:/downcase}/}Constructor: $2Constructor = Class.create();",
			"",
			"        ${2/\\s*(\\S+)/${2:/downcase}/}Constructor.prototype = {",
			"            initialize: function($5: $3, $6: $4): void {",
			"                this._$5 = $5",
			"                this._$6 = $6",
			"            },",
			"",
			"            type: \"$2\"",
			"        };",
			"",
			"        return ${2/\\s*(\\S+)/${2:/downcase}/}Constructor;",
			"    })();",
			"}"
		],
		"description": "Create ServiceNow API class with 2 constructor parameters"
	},
	"SN Ajax API Class": {
		"scope": "typescript",
		"prefix": "sn-ajax-api",
		"body": [
			"namespace ${1:${TM_DIRECTORY/^[\\\\\\/]*([^\\\\\\/]+[\\\\\\/]+)*//}} {",
			"    interface I${2:${TM_FILENAME/\\..*$$//}}Base extends \\$\\$snClass.ICustomClassBase<I$2Base, \"$2\"> {",
			"        ${3:methodName}(): ${4:void};",
			"    }",
			"",
			"    interface I$2Prototype extends \\$\\$snClass.ICustomAjaxClassPrototype<I$2Base, I$2Prototype, \"$2\">, I$2Base {",
			"    }",
			"",
			"    declare type $2 = Readonly<I$2Base>;",
			"",
			"    interface $2Constructor extends \\$\\$snClass.CustomAjaxClassConstructor<I$2Base, I$2Prototype, $2> {",
			"        new(request?: GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController): $2;",
			"        (request?: GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController): $2;",
			"        $3(): ${5:void};",
			"    }",
			"",
			"    const $2: $2Constructor = (function (): $2Constructor {",
			"        var ${2/\\s*(\\S+)/${2:/downcase}/}Constructor: $2Constructor = Class.create();",
			"",
			"        ${2/\\s*(\\S+)/${2:/downcase}/}Constructor.$3 = function(): $5 {",
			"            throw new Error(\"Method not implemented\");",
			"        };",
			"",
			"        ${2/\\s*(\\S+)/${2:/downcase}/}Constructor.prototype = Object.extendsObject<IAbstractAjaxProcessor, I$2Prototype>(global.AbstractAjaxProcessor, {",
			"            // initialize: function(this: I$2Prototype & IAbstractAjaxProcessor, request?: GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController) {",
			"            //     global.AbstractAjaxProcessor.prototype.initialize.call(this, request, responseXML, gc);",
			"            // },",
			"",
			"            $3: function(this: IAbstractAjaxProcessor & I$2Prototype): $4 {",
			"                var result: $5 = ${2/\\s*(\\S+)/${2:/downcase}/}Constructor.$3();",
			"                throw new Error(\"Method not implemented\");",
			"            },",
			"",
			"            type: \"$2\"",
			"        });",
			"",
			"        return ${2/\\s*(\\S+)/${2:/downcase}/}Constructor;",
			"    })();",
			"}"
		],
		"description": "Create client-callable ServiceNow API class"
	},
	"SN Ajax API Class (1 arg)": {
		"scope": "typescript",
		"prefix": "sn-ajax-api-1",
		"body": [
			"namespace ${1:${TM_DIRECTORY/^[\\\\\\/]*([^\\\\\\/]+[\\\\\\/]+)*//}} {",
			"    interface I${2:${TM_FILENAME/\\..*$$//}}Base extends \\$\\$snClass.ICustomClassBase<I$2Base, \"$2\"> {",
			"        ${3:methodName}(): ${4:void};",
			"    }",
			"",
			"    interface I$2Prototype extends \\$\\$snClass.ICustomAjaxClassPrototype<I$2Base, I$2Prototype, \"$2\">, I$2Base {",
			"        _${5:value}?: ${6:any};",
			"    }",
			"",
			"    declare type $2 = Readonly<I$2Base>;",
			"",
			"    interface $2Constructor extends \\$\\$snClass.CustomAjaxClassConstructor<I$2Base, I$2Prototype, $2> {",
			"        new(request?: GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController): $2;",
			"        new($5: $6): $2;",
			"        (request?: GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController): $2;",
			"        ($5: $6): $2;",
			"",
			"        $3($5: $6): ${7:void};",
			"    }",
			"",
			"    const $2: $2Constructor = (function (): $2Constructor {",
			"        var ${2/\\s*(\\S+)/${2:/downcase}/}Constructor: $2Constructor = Class.create();",
			"",
			"        ${2/\\s*(\\S+)/${2:/downcase}/}Constructor.$3 = function(): $7 {",
			"            throw new Error(\"Method not implemented\");",
			"        };",
			"",
			"        ${2/\\s*(\\S+)/${2:/downcase}/}Constructor.prototype = Object.extendsObject<IAbstractAjaxProcessor, I$2Prototype>(global.AbstractAjaxProcessor, {",
			"            initialize: function(this: IAbstractAjaxProcessor & IReservationSchedulerAjaxPrototype, arg0?: $6 | GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController) {",
			"                if (typeof arg0 === '$6') {",
			"                    global.AbstractAjaxProcessor.prototype.initialize.call(this, undefined, responseXML, gc);",
			"                    this._$5 = arg0;",
			"                } else {",
			"                    global.AbstractAjaxProcessor.prototype.initialize.call(this, arg0, responseXML, gc);",
			"                    var value: $$rhino.String = this.getParameter('sys_parm_$5');",
			"                    //if (!gs.nil(value))",
			"                    //    this._$5 = parseInt('' + value);",
			"                }",
			"            },",
			"",
			"            $3: function(this: IAbstractAjaxProcessor & I$2Prototype): $4 {",
			"                var result: $7 = ${2/\\s*(\\S+)/${2:/downcase}/}Constructor.$3(this._$5);",
			"                throw new Error(\"Method not implemented\");",
			"            },",
			"",
			"            type: \"$2\"",
			"        });",
			"",
			"        return ${2/\\s*(\\S+)/${2:/downcase}/}Constructor;",
			"    })();",
			"}"
		],
		"description": "Create client-callable ServiceNow API class with 1 common parameter"
	},
	"SN Ajax API Class (2 args)": {
		"scope": "typescript",
		"prefix": "sn-ajax-api-2",
		"body": [
			"namespace ${1:${TM_DIRECTORY/^[\\\\\\/]*([^\\\\\\/]+[\\\\\\/]+)*//}} {",
			"    interface I${2:${TM_FILENAME/\\..*$$//}}Base extends \\$\\$snClass.ICustomClassBase<I$2Base, \"$2\"> {",
			"        ${3:methodName}(): ${4:void};",
			"    }",
			"",
			"    interface I$2Prototype extends \\$\\$snClass.ICustomAjaxClassPrototype<I$2Base, I$2Prototype, \"$2\">, I$2Base {",
			"        _${7:value1}?: ${5:any};",
			"        _${8:value2}?: ${6:any};",
			"    }",
			"",
			"    declare type $2 = Readonly<I$2Base>;",
			"",
			"    interface $2Constructor extends \\$\\$snClass.CustomAjaxClassConstructor<I$2Base, I$2Prototype, $2> {",
			"        new(request?: GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController): $2;",
			"        new($7: $5, $8: $6): $2;",
			"        (request?: GlideServletRequest, responseXML?: XMLDocument2, gc?: GlideController): $2;",
			"        ($7: $5, $8: $6): $2;",
			"",
			"        $3($7: $5, $8: $6): ${9:void};",
			"    }",
			"",
			"    const $2: $2Constructor = (function (): $2Constructor {",
			"        var ${2/\\s*(\\S+)/${2:/downcase}/}Constructor: $2Constructor = Class.create();",
			"",
			"        ${2/\\s*(\\S+)/${2:/downcase}/}Constructor.$3 = function(): $9 {",
			"            throw new Error(\"Method not implemented\");",
			"        };",
			"",
			"        ${2/\\s*(\\S+)/${2:/downcase}/}Constructor.prototype = Object.extendsObject<IAbstractAjaxProcessor, I$2Prototype>(global.AbstractAjaxProcessor, {",
			"            initialize: function(arg0?: $5 | GlideServletRequest, arg1? | XMLDocument2: $6, gc?: GlideController): void {",
			"                if (typeof arg0 === '$5') {",
			"                    this._$7 = arg0;",
			"                    if (typeof arg1 === '$6') {",
			"                        this._$8 = arg1;",
			"                        global.AbstractAjaxProcessor.prototype.initialize.call(this, undefined, undefined, gc);",
			"                    } else {",
			"                        global.AbstractAjaxProcessor.prototype.initialize.call(this, undefined, responseXML, gc);",
			"                    }",
			"                } else if (typeof arg1 === '$6') {",
			"                    this._$8 = arg1;",
			"                    global.AbstractAjaxProcessor.prototype.initialize.call(this, arg0, undefined, gc);",
			"                } else {",
			"                    global.AbstractAjaxProcessor.prototype.initialize.call(this, arg0, responseXML, gc);",
			"                    var value: $$rhino.String = this.getParameter('sys_parm_$7');",
			"                    //if (!gs.nil(value))",
			"                    //    this._$7 = parseInt('' + value);",
			"                    value = this.getParameter('sys_parm_$8');",
			"                    //if (!gs.nil(value))",
			"                    //    this._$8 = parseInt('' + value);",
			"                }",
			"            },",
			"",
			"            $3: function(this: IAbstractAjaxProcessor & I$2Prototype): $4 {",
			"                var result: $9 = ${2/\\s*(\\S+)/${2:/downcase}/}Constructor.$3(this._$7, this._$8);",
			"                throw new Error(\"Method not implemented\");",
			"            },",
			"",
			"            type: \"$2\"",
			"        });",
			"",
			"        return ${2/\\s*(\\S+)/${2:/downcase}/}Constructor;",
			"    })();",
			"}"
		],
		"description": "Create client-callable ServiceNow API class with 2 common parameters"
	},
	"SN ATF Server Side Script Test": {
		"scope": "typescript",
		"prefix": "sn-test",
		"body": [
			"namespace ${1:${TM_FILENAME/\\..*$$//}} {",
			"    declare var outputs: sn_atf.ITestStepOutputs;",
			"    declare function steps(sys_id: string): sn_atf.ITestStepOutputs;",
			"    declare var stepResult: sn_atf.ITestStepResult;",
			"    (function(outputs: sn_atf.ITestStepOutputs, steps: sn_atf.ITestStepsFunc, stepResult: sn_atf.ITestStepResult, assertEqual: sn_atf.IAssertEqualFunc) {",
			"        function setFailed(stepResult: sn_atf.ITestStepResult, reason: string, e?: any): void {",
			"            if (gs.nil(e))",
			"                stepResult.setOutputMessage(reason);",
			"            else {",
			"                var m = gs.nil(e.message) ? '' : ((typeof e.message === 'string') ? e.message : '' + e.message).trim();",
			"                var name = gs.nil(e.name) ? '' : ((typeof e.name === 'string') ? e.name : '' + e.name).trim();",
			"                var stack = gs.nil(e.stack) ? '' : ((typeof e.stack === 'string') ? e.stack : '' + e.stack).trim();",
			"                if (m.length > 0) {",
			"                    if (name.length > 0) {",
			"                        if (stack.length > 0)",
			"                            stepResult.setOutputMessage(\"Unexpected \" + name + \": \" + reason + \"\\nMessage: \" + m + \"\\nStack trace:\\n\" + stack);",
			"                        else",
			"                            stepResult.setOutputMessage(\"Unexpected \" + name + \": \" + reason + \"\\nMessage: \" + m);",
			"                    }",
			"                    else if (stack.length > 0)",
			"                        stepResult.setOutputMessage(\"Unexpected error: \" + reason + \"\\nMessage: \" + m + \"\\nStack trace:\\n\" + stack);",
			"                    else",
			"                        stepResult.setOutputMessage(\"Unexpected error: \" + reason + \"\\nMessage: \" + m);",
			"                } else if (name.length > 0)",
			"                    stepResult.setOutputMessage(\"Unexpected error: \" + ((stack.length > 0) ? reason + \"\\n\" + stack : reason));",
			"                else if (stack.length > 0)",
			"                    stepResult.setOutputMessage(\"Unexpected error: \" + reason + \"\\n\" + stack);",
			"                else if ((m = ('' + e).trim()).length > 0)",
			"                    stepResult.setOutputMessage(\"Unexpected error: \" + reason + \"\\nMessage: \" + m);",
			"                else",
			"                    stepResult.setOutputMessage(\"Unexpected error: \" + reason);",
			"            }",
			"            stepResult.setFailed();",
			"        }",
			"",
			"        var actual: boolean | undefined",
			"        try {",
			"            // Add test code here",
			"        } catch (e) {",
			"            setFailed('Unexpected exception while getting result', e);",
			"        }",
			"        assertEqual({",
			"            name: 'result is boolean',",
			"            shouldBe: true,",
			"            value: typeof actual",
			"        }",
			"        assertEqual({",
			"            name: 'result is true',",
			"            shouldBe: true,",
			"            value: actual",
			"        }",
			"    }",
			"}"
		],
		"description": "TypeScript boilerplate code for 'Run Server Side Script' test step"
	}
}